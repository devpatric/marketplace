<?php

namespace App\Api\Request\Auth;


use App\Api\Request\Request as ApiRequest;
use App\Api\Response\Response as ApiResponse;
use App\Auth\AuthenticatesUsers;
use App\Http\Resources\Conversation;
use App\Message;
use App\User;
use Illuminate\Contracts\Auth\Guard;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Collection;
use Illuminate\Validation\Validator;

/**
 * API login request
 */
class LoginRequest extends ApiRequest
{

    use AuthenticatesUsers;

    /** @var Guard */
    protected $guard;

    /**
     * LoginRequest constructor.
     *
     * @param Guard $guard
     */
    public function __construct(Guard $guard)
    {
        $this->guard = $guard;
    }

    /**
     * @inheritDoc
     */
    protected function shouldResolve()
    {
        return $this->guard->guest();
    }

    /**
     * @inheritDoc
     *
     * @param            $name
     * @param Collection $parameters
     *
     * @return ApiResponse|mixed
     * @throws \Illuminate\Validation\ValidationException
     */
    protected function doResolve($name, Collection $parameters)
    {
        $login = $password = $remember = null;
        extract($parameters->all(), EXTR_IF_EXISTS);

        $response = $this->login($login, $password, $remember);

        if ( ! $response instanceof ApiResponse) {
            return new ApiResponse(true, $response);
        }

        return $response;
    }

    /**
     * @inheritdoc
     *
     * @param Validator|null $validator
     *
     * @return array
     */
    protected function rules(
        Collection $parameters,
        Validator $validator = null
    )
    {
        return [
            'login' => 'required|string',
            'password' => 'required|string',
            'remember' => 'required|boolean',
        ];
    }

    /**
     * @inheritDoc
     */
    protected function sendLoginResponse()
    {
        /** @var User $user */
        $user = $this->guard->user();

        // add user specific data

        // unread conversations
        /** @var Builder $query */
        $query = Message::conversationsWith($user->username)
            ->scopes(['personal']);

        $conversations = $query
            ->where(['to_username' => $user->username])
            ->where(['read' => false])
            ->get();

        return [
            'unread_conversations' => Conversation::collection($conversations),
        ];
    }

}
